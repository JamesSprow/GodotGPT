[gd_scene load_steps=5 format=3 uid="uid://d4jcuwb3v5hfi"]

[ext_resource type="Script" path="res://addons/godot_gpt/examples/chat/chat_example.gd" id="1_1e0cm"]
[ext_resource type="PackedScene" uid="uid://di8cv15276ai6" path="res://addons/godot_gpt/examples/chat/chat_entry/chat_entry.tscn" id="2_2q4w4"]
[ext_resource type="PackedScene" uid="uid://db4dkaa7rodme" path="res://addons/godot_gpt/examples/common/prompt_input/prompt_input.tscn" id="4_37pu7"]

[sub_resource type="GDScript" id="GDScript_ccelt"]
script/source = "# This script extends the GPTRequest class, defining functionality specific to handling chat requests with GPT.
extends GPTRequest
# Assign a custom class name \"GPTChatRequest\" for easier reference and instantiation in other scripts.
class_name GPTChatRequest

# Define a variable \"history\" to store the conversation history. Each entry is a dictionary with details about the message.
var history: Array[Dictionary] = []

# This function is called when a GPT request is completed.
# It processes the response from GPT and stores it in the history.
func _request_completed_post_process(gpt_response: String) -> void:
	# Call the base class's version of this function to ensure any base-level processing is carried out.
	super(gpt_response)
	# Append the GPT's response to the history with the role specified as \"system\".
	history.append({
		\"role\": \"system\",
		\"content\": gpt_response
	})

# This function clears the conversation history.
func clear_history() -> void:
	history = []

# This function initiates a chat request to GPT using the provided prompt.
# It structures the request based on the ongoing conversation history and sends it to GPT.
func gpt_chat_request(prompt: String) -> Error:
	# Create a dictionary representing the user's message.
	var message: Dictionary = {
		\"role\": \"user\",
		\"content\": prompt
	}
	# Duplicate the current conversation history to avoid directly modifying it.
	var messages: Array[Dictionary] = history.duplicate()
	# Append the user's message to the list of messages.
	messages.append(message)
	
	# Update the main conversation history with the user's message.
	history.append(message)
	
	# Send the updated list of messages to GPT to generate a completion and return any potential error.
	return gpt_completions_request(messages)
"

[node name="chat" type="Control" node_paths=PackedStringArray("gpt", "chat_history_scroll", "chat_history", "prompt_input")]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_1e0cm")
gpt = NodePath("GPTChatRequest")
chat_history_scroll = NodePath("VBoxContainer/ScrollContainer")
chat_history = NodePath("VBoxContainer/ScrollContainer/chat_history")
prompt_input = NodePath("VBoxContainer/prompt_input")
chat_entry_scene = ExtResource("2_2q4w4")

[node name="GPTChatRequest" type="HTTPRequest" parent="."]
script = SubResource("GDScript_ccelt")
api_key = "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"

[node name="VBoxContainer" type="VBoxContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="ScrollContainer" type="ScrollContainer" parent="VBoxContainer"]
layout_mode = 2
size_flags_vertical = 3
follow_focus = true
horizontal_scroll_mode = 0

[node name="chat_history" type="VBoxContainer" parent="VBoxContainer/ScrollContainer"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="prompt_input" parent="VBoxContainer" instance=ExtResource("4_37pu7")]
layout_mode = 2
text_box_placeholder = "Ask ChatGPT a question!"
